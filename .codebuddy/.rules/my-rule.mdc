# TREA JavaScript代码优化规则

## 1. 变量命名规范

### 1.1 缓存变量命名
- **临时缓存**：使用 `temp` 前缀标识弹窗或临时数据
  ```javascript
  // ❌ 不推荐
  var selectedProductsCache = [];
  
  // ✅ 推荐
  var tempSelectedProducts = [];
  ```

- **持久数据**：使用描述性命名
  ```javascript
  // ✅ 推荐
  var selectedProducts = [];        // 最终确认的选择
  var confirmedProductList = [];    // 已确认的商品列表
  ```

### 1.2 集合变量命名
- **数组类型**：使用复数形式
  ```javascript
  var productList = [];
  var categoryItems = [];
  ```

- **Set/Map类型**：明确标识数据结构
  ```javascript
  var selectedProductIds = new Set();     // 快速查找
  var productMap = new Map();             // 键值映射
  ```

## 2. 性能优化规则

### 2.1 数组查找优化
```javascript
// ❌ 低效 - O(n)时间复杂度
var exists = selectedProducts.find(p => p.id === id);

// ✅ 高效 - O(1)时间复杂度
var selectedProductIds = new Set(selectedProducts.map(p => p.id));
var exists = selectedProductIds.has(id);
```

### 2.2 批量操作优化
```javascript
// ❌ 多次DOM操作
items.forEach(item => {
  $('#table').append(`<tr><td>${item.name}</td></tr>`);
});

// ✅ 批量DOM操作
var html = items.map(item => `<tr><td>${item.name}</td></tr>`).join('');
$('#table').append(html);
```

## 3. DOM操作规范

### 3.1 优先使用框架API
```javascript
// ❌ 不推荐 - 直接操作DOM
$('#productTable').find('input[type="checkbox"]').prop('checked', true);

// ✅ 推荐 - 使用Layui API
table.setRowChecked(rowId, true);
form.render('checkbox');
```

### 3.2 事件委托优化
```javascript
// ❌ 重复绑定
$('.delete-btn').on('click', handleDelete);

// ✅ 事件委托
$(document).on('click', '.delete-btn', handleDelete);
```

## 4. 错误处理规则

### 4.1 分层错误处理
```javascript
function navigateBack() {
  // 1. 标准方式
  if (parent?.tools?.childChangeTitle) {
    try {
      parent.tools.childChangeTitle("商品组管理", "tgls/productGroup/productGroup.html");
      return;
    } catch (error) {
      console.warn('标准方式失败:', error);
    }
  }
  
  // 2. 备用方案
  if (window.parent?.layer) {
    window.parent.layer.closeAll();
    return;
  }
  
  // 3. 兜底方案
  window.history.back();
}
```

### 4.2 错误信息规范
```javascript
// ✅ 清晰的错误提示
console.error('[商品选择] 数据加载失败:', error.message);
layer.msg('商品数据加载失败，请稍后重试', {icon: 2});
```

## 5. 配置提取规则

### 5.1 表格配置常量化
```javascript
const PRODUCT_TABLE_CONFIG = {
  elem: '#productTable',
  width: '100%',
  url: '../../../product/manageQuery',
  id: 'productTable',
  page: {
    limit: 10,
    limits: [10, 20, 50, 100]
  },
  cols: [[
    {type: 'checkbox', fixed: 'left'},
    {field: 'productName', title: '商品名称', minWidth: 200},
    {field: 'productCode', title: '商品编码', minWidth: 120}
  ]]
};

// 使用配置
var tableIns = table.render(PRODUCT_TABLE_CONFIG);
```

### 5.2 接口配置统一管理
```javascript
const API_CONFIG = {
  product: {
    list: '../../../product/manageQuery',
    detail: '../../../product/detail',
    save: '../../../productGroup/save'
  },
  category: {
    list: '../../../category/list',
    tree: '../../../category/tree'
  }
};
```

## 6. 代码复用规则

### 6.1 通用函数提取
```javascript
// ❌ 重复代码
function handleSelectAll() {
  var currentPageData = table.cache.productTable;
  currentPageData.forEach(row => {
    if (!tempSelectedProducts.find(p => p.productId === row.productId)) {
      tempSelectedProducts.push(row);
    }
  });
}

function handleUnselectAll() {
  var currentPageData = table.cache.productTable;
  var currentPageProductIds = currentPageData.map(item => item.productId);
  tempSelectedProducts = tempSelectedProducts.filter(p => 
    !currentPageProductIds.includes(p.productId)
  );
}

// ✅ 提取通用函数
function handleBulkSelection(items, shouldSelect) {
  if (shouldSelect) {
    items.forEach(item => {
      if (!selectedProductIds.has(item.productId)) {
        tempSelectedProducts.push(item);
        selectedProductIds.add(item.productId);
      }
    });
  } else {
    const itemIds = new Set(items.map(item => item.productId));
    tempSelectedProducts = tempSelectedProducts.filter(p => !itemIds.has(p.productId));
    selectedProductIds = new Set(tempSelectedProducts.map(p => p.productId));
  }
}
```

### 6.2 工具函数库
```javascript
// 工具函数库
const Utils = {
  // 数组去重
  uniqueByKey: (array, key) => {
    const seen = new Set();
    return array.filter(item => {
      const duplicate = seen.has(item[key]);
      seen.add(item[key]);
      return !duplicate;
    });
  },
  
  // 安全获取嵌套属性
  safeGet: (obj, path, defaultValue = null) => {
    return path.split('.').reduce((current, key) => {
      return current && current[key] !== undefined ? current[key] : defaultValue;
    }, obj);
  }
};
```

## 7. 注释规范

### 7.1 函数注释模板
```javascript
/**
 * 更新表头全选checkbox状态
 * @description 根据当前页数据检查是否所有商品都已选中
 * @param {Array} currentPageData - 当前页数据
 * @param {Set} selectedProductIds - 已选商品ID集合
 * @returns {void}
 * @example
 * updateHeaderCheckboxState(currentData, selectedIds);
 */
function updateHeaderCheckboxState(currentPageData, selectedProductIds) {
  // 实现逻辑
}
```

### 7.2 关键逻辑注释
```javascript
// 重要：必须使用相对路径，确保与frame_admin.js中的路径格式一致
var deletePath = window.location.href.match(/\/tgls.*$/)[0];
parent.tools.deleteTitel(deletePath);
```

## 8. 代码结构规范

### 8.1 模块划分
```javascript
// 配置区域
const CONFIG = { /* 配置 */ };

// 状态管理
let state = {
  selectedProducts: [],
  tempSelectedProducts: [],
  selectedProductIds: new Set()
};

// 工具函数
const utils = { /* 工具函数 */ };

// 事件处理
const handlers = { /* 事件处理 */ };

// 初始化
function init() { /* 初始化逻辑 */ }
```

## 9. 调试规范

### 9.1 日志规范
```javascript
// ✅ 使用命名空间日志
console.log('[商品选择] 数据加载完成:', data);
console.warn('[商品选择] 重复商品ID:', duplicateId);
console.error('[商品选择] API调用失败:', error);
```

### 9.2 调试开关
```javascript
const DEBUG = {
  enabled: true,
  log: (...args) => DEBUG.enabled && console.log('[DEBUG]', ...args)
};

// 使用
DEBUG.log('当前状态:', state);
```

---

## 📊 实施检查清单

- [ ] 变量命名符合规范
- [ ] 性能敏感代码使用Set/Map
- [ ] DOM操作使用框架API
- [ ] 错误处理有分层策略
- [ ] 配置提取为常量
- [ ] 重复代码已提取为函数
- [ ] 关键逻辑有详细注释
- [ ] 代码结构清晰分层
- [ ] 调试信息规范完整

**版本**: v1.0  
**最后更新**: 2024年12月  
**适用范围**: JavaScript前端项目


## 10. Java代码规范
- 遵顼阿里编码规约
- 类名使用驼峰命名法
- 方法名使用驼峰命名法
- 变量名使用驼峰命名法
- 常量名使用大写字母和下划线
- 每个类有注释，注释中包含类的功能、作者、日期等信息
- 每个方法有注释，注释中包含方法的功能、参数、返回值等信息
- 每个变量有注释，注释中包含变量的功能、作用域等信息
- 每个常量有注释，注释中包含常量的功能、值等信息